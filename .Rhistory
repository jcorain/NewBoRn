#### if the start month is before the end month get the month from m1-y to m2-y for each year
if (m2 >= m1) {
out_dates <- unlist(lapply(years, function(x) seq(as.Date(paste(x, m1, d1, sep = "-")),
as.Date(paste(x, m2, d2, sep = "-")),
by = paste(every, interval))))
} else{
out_dates <-seq(as.Date(paste(y1, m1, d1, sep = "-")),
as.Date(paste(y2+1, m2, d2, sep = "-")),
by = paste(every, interval))
}
### returning unique dates
out_dates  <- as.Date(sort(unique(out_dates)), origin = "1970-01-01")
if(interval == "quarter"){
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), "month")/4, 0)
} else{
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), interval))
}
# give the attribute interval to timesteps
attr(out_step, "interval") <- interval
return(list(dates = out_dates, timestep = out_steps))
} # end deploy function
test <- deploy( y1 = 2020, y2 = 2023, m1 = 4, m2 = 5, d1 = 1, d2 = 1, interval = "month")
#' @title deploy
#' @name deploy
#'
#' @description deployment function
#'
#' @param y1 year of the first date (surveys starting from year y1)
#' @param m1 month of the first date
#' @param d1 day of the first date
#' @param y2 year of the end date (surveys continuing until year y2)
#' @param m2 month of the end date
#' @param d2 day of the end date
#' @param every interval size
#' @param interval interval size (days, weeks, )
#' @param SIMSTART  Starting date of the simulations in the format "yyyy-mm-dd"
#'
#' @return a list containing :
#'           - The deployment dates
#'           - The timestep containing the number of steps, based on the interval, in regard to the SIMSTART
#'
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 4) will deploy in
#' 5/2020, 6/2020, 7/2020, 8/2020, 9/2020, ... , 2/2023, 3/2023, 4/2023
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 7) will deploy only in
#' 5/2020, 6/2020, 7/2020, 5/2021, 6/2021, 7/2021, 5/2022, 6/2022, 7/2022
deploy <- function(y1 = 2000, y2 = NULL,
m1 = 5, m2 = NULL,
d1 = 5, d2 = NULL,
every = 1, interval = "year",
SIMSTART = "1918-01-01") {
##-- assumptions when missing
if( is.null(y2) ) y2 = y1
if( is.null(m2) ) m2 = m1
if( is.null(d2) ) d2 = d1
##-- warning if NA values
if( is.na( m1 ) ) stop("month value is NA")
if( is.na( d1 ) ) stop("day value is NA")
if( is.na( y1 ) ) stop("year value is NA")
##-- warning if non-sensical values
if( y2 < y1 ) stop("error: y2 < y1")
if (interval == "quarter") {
m1 <- 1
m2 <- 12
# prompt a message
message("As you asked for quarter intervals, the m1 and m2 have been set to 1 and 12 idependently of your inputs")
}
if( m2 < m1 ){
message(
paste(  "Assuming deployments every", every,interval, "from"
, m1, "-", y1, "to", m2, "-", y2 + 1) )
#every = 1; interval = "month"
}
out_dates <- NULL
# set the sequence of years
years <- y1:y2
#### if the start month is before the end month get the month from m1-y to m2-y for each year
if (m2 >= m1) {
out_dates <- unlist(lapply(years, function(x) seq(as.Date(paste(x, m1, d1, sep = "-")),
as.Date(paste(x, m2, d2, sep = "-")),
by = paste(every, interval))))
} else{
out_dates <-seq(as.Date(paste(y1, m1, d1, sep = "-")),
as.Date(paste(y2+1, m2, d2, sep = "-")),
by = paste(every, interval))
}
### returning unique dates
out_dates  <- as.Date(sort(unique(out_dates)), origin = "1970-01-01")
if(interval == "quarter"){
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), "month")/4, 0)
} else{
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), interval))
}
# give the attribute interval to timesteps
attr(out_steps, "interval") <- interval
return(list(dates = out_dates, timestep = out_steps))
} # end deploy function
test <- deploy( y1 = 2020, y2 = 2023, m1 = 4, m2 = 5, d1 = 1, d2 = 1, interval = "month")
test
test <- deploy( y1 = 2020, y2 = 2023, m1 = 5, m2 = 3, d1 = 1, d2 = 1, interval = "month")
test
test <- deploy( y1 = 2020, y2 = 2023, m1 = 5, m2 = 3, d1 = 1, d2 = 1, interval = "year")
test
test <- deploy( y1 = 2020, y2 = 2023, m1 = 5, m2 = 3, d1 = 1, d2 = 1, interval = "quarter")
test
test <- deploy( y1 = 2020, y2 = 2023, m1 = 5, m2 = 3, d1 = 1, d2 = 1, interval = "quarter")
#### Your response (#6)
# My understanding of the function is that it returns deployed date with the following rules :
#   - if m2 > m1, only get the deploy date from y1-m1-d1 ... y1-m2-d2, (y1+1)-m1-d1, .... (y1+1)-m2-d2, ... y2-m1-d1, ..., y2-m2-d2
# skipping the interval between m2-d2 and m1-d1 for each year
#   - if m1 < m2 get all interval dates between y1-m1-d1 and (y2+1)-m2-d2 (I have a doubt between y2+1 or y2 as in
# the definition you have written 3/2023 but 4/2022, the code clearly goes only to y2-m2 but is in this case lacking
# a check to ensure that y2 > y1 otherwise we can not have any interval)
#   - if the asked interval is quarter, it returns all the quarter between y1 and y2 regardless of m1 and m2
# Concerning the timestep, I did not properly understood the logic with the /5 +1. Therefore, I decided
# to get timesteps which reflects the chosen interval.
#
# Therefore, to improve the function :
#     - I changed the Roxygen comments to include a return field
#     - I moved the month change for quarter interval before the check for m2 < m1 and added a message to inform
# the user about month change
#     - I changed the year for loops to an apply function in the case m2 > m1 and I extend his latest to include m1 = m2
#     - I changed the message and interval in the case m2 < m1 to go up to y2 + 1
#     - I changed the names of the local objects to be more readable
#     - I changed the timesteps
#     - I added the interval as an attribute for the timesteps to keep track of it
#
# Of course, my changes are based on my assumptions reading the function and will be changed after discussion with the users.
#' @title deploy
#' @name deploy
#'
#' @description deployment function
#'
#' @param y1 year of the first date (surveys starting from year y1)
#' @param m1 month of the first date
#' @param d1 day of the first date
#' @param y2 year of the end date (surveys continuing until year y2)
#' @param m2 month of the end date
#' @param d2 day of the end date
#' @param every interval size
#' @param interval interval size (days, weeks, )
#' @param SIMSTART  Starting date of the simulations in the format "yyyy-mm-dd"
#'
#' @return a list containing :
#'           - The deployment dates
#'           - The timestep containing the number of steps, based on the interval, in regard to the SIMSTART
#'
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 4) will deploy in
#' 5/2020, 6/2020, 7/2020, 8/2020, 9/2020, ... , 2/2023, 3/2023, 4/2023
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 7) will deploy only in
#' 5/2020, 6/2020, 7/2020, 5/2021, 6/2021, 7/2021, 5/2022, 6/2022, 7/2022
deploy <- function(y1 = 2000, y2 = NULL,
m1 = 5, m2 = NULL,
d1 = 5, d2 = NULL,
every = 1, interval = "year",
SIMSTART = "1918-01-01") {
##-- assumptions when missing
if( is.null(y2) ) y2 = y1
if( is.null(m2) ) m2 = m1
if( is.null(d2) ) d2 = d1
##-- warning if NA values
if( is.na( m1 ) ) stop("month value is NA")
if( is.na( d1 ) ) stop("day value is NA")
if( is.na( y1 ) ) stop("year value is NA")
##-- warning if non-sensical values
if( y2 < y1 ) stop("error: y2 < y1")
if (interval == "quarter") {
m1 <- 1
m2 <- 12
# prompt a message
message("As you asked for quarter intervals, the m1 and m2 have been set to 1 and 12 independently of your inputs")
}
if( m2 < m1 ){
message(
paste(  "Assuming deployments every", every,interval, "from"
, m1, "-", y1, "to", m2, "-", y2 + 1) )
#every = 1; interval = "month"
}
out_dates <- NULL
# set the sequence of years
years <- y1:y2
#### if the start month is before the end month get the month from m1-y to m2-y for each year
if (m2 >= m1) {
out_dates <- unlist(lapply(years, function(x) seq(as.Date(paste(x, m1, d1, sep = "-")),
as.Date(paste(x, m2, d2, sep = "-")),
by = paste(every, interval))))
} else{
out_dates <-seq(as.Date(paste(y1, m1, d1, sep = "-")),
as.Date(paste(y2+1, m2, d2, sep = "-")),
by = paste(every, interval))
}
### returning unique dates
out_dates  <- as.Date(sort(unique(out_dates)), origin = "1970-01-01")
if(interval == "quarter"){
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), "year"))
} else{
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), interval))
}
# give the attribute interval to timesteps
attr(out_steps, "interval") <- interval
return(list(dates = out_dates, timestep = out_steps))
} # end deploy function
test <- deploy( y1 = 2020, y2 = 2023, m1 = 5, m2 = 3, d1 = 1, d2 = 1, interval = "quarter")
test
#### Your response (#6)
# My understanding of the function is that it returns deployed date with the following rules :
#   - if m2 > m1, only get the deploy date from y1-m1-d1 ... y1-m2-d2, (y1+1)-m1-d1, .... (y1+1)-m2-d2, ... y2-m1-d1, ..., y2-m2-d2
# skipping the interval between m2-d2 and m1-d1 for each year
#   - if m1 < m2 get all interval dates between y1-m1-d1 and (y2+1)-m2-d2 (I have a doubt between y2+1 or y2 as in
# the definition you have written 3/2023 but 4/2022, the code clearly goes only to y2-m2 but is in this case lacking
# a check to ensure that y2 > y1 otherwise we can not have any interval)
#   - if the asked interval is quarter, it returns all the quarter between y1 and y2 regardless of m1 and m2
# Concerning the timestep, I did not properly understood the logic with the /5 +1. Therefore, I decided
# to get timesteps which reflects the chosen interval.
#
# Therefore, to improve the function :
#     - I changed the Roxygen comments to include a return field
#     - I moved the month change for quarter interval before the check for m2 < m1 and added a message to inform
# the user about month change
#     - I changed the year for loops to an apply function in the case m2 > m1 and I extend his latest to include m1 = m2
#     - I changed the message and interval in the case m2 < m1 to go up to y2 + 1
#     - I changed the names of the local objects to be more readable
#     - I changed the timesteps
#     - I added the interval as an attribute for the timesteps to keep track of it
#
# Of course, my changes are based on my assumptions reading the function and will be changed after discussion with the users.
#' @title deploy
#' @name deploy
#'
#' @description deployment function
#'
#' @param y1 year of the first date (surveys starting from year y1)
#' @param m1 month of the first date
#' @param d1 day of the first date
#' @param y2 year of the end date (surveys continuing until year y2)
#' @param m2 month of the end date
#' @param d2 day of the end date
#' @param every interval size
#' @param interval interval size (days, weeks, )
#' @param SIMSTART  Starting date of the simulations in the format "yyyy-mm-dd"
#'
#' @return a list containing :
#'           - The deployment dates
#'           - The timestep containing the number of steps, based on the interval, in regard to the SIMSTART
#'
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 4) will deploy in
#' 5/2020, 6/2020, 7/2020, 8/2020, 9/2020, ... , 2/2023, 3/2023, 4/2023
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 7) will deploy only in
#' 5/2020, 6/2020, 7/2020, 5/2021, 6/2021, 7/2021, 5/2022, 6/2022, 7/2022
deploy <- function(y1 = 2000, y2 = NULL,
m1 = 5, m2 = NULL,
d1 = 5, d2 = NULL,
every = 1, interval = "year",
SIMSTART = "1918-01-01") {
##-- assumptions when missing
if( is.null(y2) ) y2 = y1
if( is.null(m2) ) m2 = m1
if( is.null(d2) ) d2 = d1
##-- warning if NA values
if( is.na( m1 ) ) stop("month value is NA")
if( is.na( d1 ) ) stop("day value is NA")
if( is.na( y1 ) ) stop("year value is NA")
##-- warning if non-sensical values
if( y2 < y1 ) stop("error: y2 < y1")
if (interval == "quarter") {
m1 <- 1
m2 <- 12
# prompt a message
message("As you asked for quarter intervals, the m1 and m2 have been set to 1 and 12 independently of your inputs")
}
if( m2 < m1 ){
message(
paste(  "Assuming deployments every", every,interval, "from"
, m1, "-", y1, "to", m2, "-", y2 + 1) )
#every = 1; interval = "month"
}
out_dates <- NULL
# set the sequence of years
years <- y1:y2
#### if the start month is before the end month get the month from m1-y to m2-y for each year
if (m2 >= m1) {
out_dates <- unlist(lapply(years, function(x) seq(as.Date(paste(x, m1, d1, sep = "-")),
as.Date(paste(x, m2, d2, sep = "-")),
by = paste(every, interval))))
} else{
out_dates <-seq(as.Date(paste(y1, m1, d1, sep = "-")),
as.Date(paste(y2+1, m2, d2, sep = "-")),
by = paste(every, interval))
}
### returning unique dates
out_dates  <- as.Date(sort(unique(out_dates)), origin = "1970-01-01")
if(interval == "quarter"){
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), "month"))
} else{
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), interval))
}
# give the attribute interval to timesteps
attr(out_steps, "interval") <- interval
return(list(dates = out_dates, timestep = out_steps))
} # end deploy function
test
#### Your response (#6)
# My understanding of the function is that it returns deployed date with the following rules :
#   - if m2 > m1, only get the deploy date from y1-m1-d1 ... y1-m2-d2, (y1+1)-m1-d1, .... (y1+1)-m2-d2, ... y2-m1-d1, ..., y2-m2-d2
# skipping the interval between m2-d2 and m1-d1 for each year
#   - if m1 < m2 get all interval dates between y1-m1-d1 and (y2+1)-m2-d2 (I have a doubt between y2+1 or y2 as in
# the definition you have written 3/2023 but 4/2022, the code clearly goes only to y2-m2 but is in this case lacking
# a check to ensure that y2 > y1 otherwise we can not have any interval)
#   - if the asked interval is quarter, it returns all the quarter between y1 and y2 regardless of m1 and m2
# Concerning the timestep, I did not properly understood the logic with the /5 +1. Therefore, I decided
# to get timesteps which reflects the chosen interval.
#
# Therefore, to improve the function :
#     - I changed the Roxygen comments to include a return field
#     - I moved the month change for quarter interval before the check for m2 < m1 and added a message to inform
# the user about month change
#     - I changed the year for loops to an apply function in the case m2 > m1 and I extend his latest to include m1 = m2
#     - I changed the message and interval in the case m2 < m1 to go up to y2 + 1
#     - I changed the names of the local objects to be more readable
#     - I changed the timesteps
#     - I added the interval as an attribute for the timesteps to keep track of it
#
# Of course, my changes are based on my assumptions reading the function and will be changed after discussion with the users.
#' @title deploy
#' @name deploy
#'
#' @description deployment function
#'
#' @param y1 year of the first date (surveys starting from year y1)
#' @param m1 month of the first date
#' @param d1 day of the first date
#' @param y2 year of the end date (surveys continuing until year y2)
#' @param m2 month of the end date
#' @param d2 day of the end date
#' @param every interval size
#' @param interval interval size (days, weeks, )
#' @param SIMSTART  Starting date of the simulations in the format "yyyy-mm-dd"
#'
#' @return a list containing :
#'           - The deployment dates
#'           - The timestep containing the number of steps, based on the interval, in regard to the SIMSTART
#'
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 4) will deploy in
#' 5/2020, 6/2020, 7/2020, 8/2020, 9/2020, ... , 2/2023, 3/2023, 4/2023
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 7) will deploy only in
#' 5/2020, 6/2020, 7/2020, 5/2021, 6/2021, 7/2021, 5/2022, 6/2022, 7/2022
deploy <- function(y1 = 2000, y2 = NULL,
m1 = 5, m2 = NULL,
d1 = 5, d2 = NULL,
every = 1, interval = "year",
SIMSTART = "1918-01-01") {
##-- assumptions when missing
if( is.null(y2) ) y2 = y1
if( is.null(m2) ) m2 = m1
if( is.null(d2) ) d2 = d1
##-- warning if NA values
if( is.na( m1 ) ) stop("month value is NA")
if( is.na( d1 ) ) stop("day value is NA")
if( is.na( y1 ) ) stop("year value is NA")
##-- warning if non-sensical values
if( y2 < y1 ) stop("error: y2 < y1")
if (interval == "quarter") {
m1 <- 1
m2 <- 12
# prompt a message
message("As you asked for quarter intervals, the m1 and m2 have been set to 1 and 12 independently of your inputs")
}
if( m2 < m1 ){
message(
paste(  "Assuming deployments every", every,interval, "from"
, m1, "-", y1, "to", m2, "-", y2 + 1) )
#every = 1; interval = "month"
}
out_dates <- NULL
# set the sequence of years
years <- y1:y2
#### if the start month is before the end month get the month from m1-y to m2-y for each year
if (m2 >= m1) {
out_dates <- unlist(lapply(years, function(x) seq(as.Date(paste(x, m1, d1, sep = "-")),
as.Date(paste(x, m2, d2, sep = "-")),
by = paste(every, interval))))
} else{
out_dates <-seq(as.Date(paste(y1, m1, d1, sep = "-")),
as.Date(paste(y2+1, m2, d2, sep = "-")),
by = paste(every, interval))
}
### returning unique dates
out_dates  <- as.Date(sort(unique(out_dates)), origin = "1970-01-01")
if(interval == "quarter"){
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), "month"))
} else{
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), interval))
}
# give the attribute interval to timesteps
attr(out_steps, "interval") <- interval
return(list(dates = out_dates, timestep = out_steps))
} # end deploy function
test <- deploy( y1 = 2020, y2 = 2023, m1 = 5, m2 = 3, d1 = 1, d2 = 1, interval = "quarter")
test
#### Your response (#6)
# My understanding of the function is that it returns deployed date with the following rules :
#   - if m2 > m1, only get the deploy date from y1-m1-d1 ... y1-m2-d2, (y1+1)-m1-d1, .... (y1+1)-m2-d2, ... y2-m1-d1, ..., y2-m2-d2
# skipping the interval between m2-d2 and m1-d1 for each year
#   - if m1 < m2 get all interval dates between y1-m1-d1 and (y2+1)-m2-d2 (I have a doubt between y2+1 or y2 as in
# the definition you have written 3/2023 but 4/2022, the code clearly goes only to y2-m2 but is in this case lacking
# a check to ensure that y2 > y1 otherwise we can not have any interval)
#   - if the asked interval is quarter, it returns all the quarter between y1 and y2 regardless of m1 and m2
# Concerning the timestep, I did not properly understood the logic with the /5 +1. Therefore, I decided
# to get timesteps which reflects the chosen interval.
#
# Therefore, to improve the function :
#     - I changed the Roxygen comments to include a return field
#     - I moved the month change for quarter interval before the check for m2 < m1 and added a message to inform
# the user about month change
#     - I changed the year for loops to an apply function in the case m2 > m1 and I extend his latest to include m1 = m2
#     - I changed the message and interval in the case m2 < m1 to go up to y2 + 1
#     - I changed the names of the local objects to be more readable
#     - I changed the timesteps
#     - I added the interval as an attribute for the timesteps to keep track of it
#
# Of course, my changes are based on my assumptions reading the function and will be changed after discussion with the users.
#' @title deploy
#' @name deploy
#'
#' @description deployment function
#'
#' @param y1 year of the first date (surveys starting from year y1)
#' @param m1 month of the first date
#' @param d1 day of the first date
#' @param y2 year of the end date (surveys continuing until year y2)
#' @param m2 month of the end date
#' @param d2 day of the end date
#' @param every interval size
#' @param interval interval size (days, weeks, )
#' @param SIMSTART  Starting date of the simulations in the format "yyyy-mm-dd"
#'
#' @return a list containing :
#'           - The deployment dates
#'           - The timestep containing the number of steps, based on the interval, in regard to the SIMSTART
#'
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 4) will deploy in
#' 5/2020, 6/2020, 7/2020, 8/2020, 9/2020, ... , 2/2023, 3/2023, 4/2023
#' @example deploy( y1 = 2020, y2 = 2022, m1 = 5, m2 = 7) will deploy only in
#' 5/2020, 6/2020, 7/2020, 5/2021, 6/2021, 7/2021, 5/2022, 6/2022, 7/2022
deploy <- function(y1 = 2000, y2 = NULL,
m1 = 5, m2 = NULL,
d1 = 5, d2 = NULL,
every = 1, interval = "year",
SIMSTART = "1918-01-01") {
##-- assumptions when missing
if( is.null(y2) ) y2 = y1
if( is.null(m2) ) m2 = m1
if( is.null(d2) ) d2 = d1
##-- warning if NA values
if( is.na( m1 ) ) stop("month value is NA")
if( is.na( d1 ) ) stop("day value is NA")
if( is.na( y1 ) ) stop("year value is NA")
##-- warning if non-sensical values
if( y2 < y1 ) stop("error: y2 < y1")
if (interval == "quarter") {
m1 <- 1
m2 <- 12
# prompt a message
message("As you asked for quarter intervals, the m1 and m2 have been set to 1 and 12 independently of your inputs")
}
if( m2 < m1 ){
message(
paste(  "Assuming deployments every", every,interval, "from"
, m1, "-", y1, "to", m2, "-", y2 + 1) )
#every = 1; interval = "month"
}
out_dates <- NULL
# set the sequence of years
years <- y1:y2
#### if the start month is before the end month get the month from m1-y to m2-y for each year
if (m2 >= m1) {
out_dates <- unlist(lapply(years, function(x) seq(as.Date(paste(x, m1, d1, sep = "-")),
as.Date(paste(x, m2, d2, sep = "-")),
by = paste(every, interval))))
} else{
out_dates <-seq(as.Date(paste(y1, m1, d1, sep = "-")),
as.Date(paste(y2+1, m2, d2, sep = "-")),
by = paste(every, interval))
}
### returning unique dates
out_dates  <- as.Date(sort(unique(out_dates)), origin = "1970-01-01")
if(interval == "quarter"){
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), "month")/3)
} else{
out_steps <- trunc(lubridate::time_length(lubridate::interval(as.Date(SIMSTART),out_dates), interval))
}
# give the attribute interval to timesteps
attr(out_steps, "interval") <- interval
return(list(dates = out_dates, timestep = out_steps))
} # end deploy function
test <- deploy( y1 = 2020, y2 = 2023, m1 = 5, m2 = 3, d1 = 1, d2 = 1, interval = "quarter")
test
grepl("^\d\d\d\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "test")
?regexpr
grepl("\d\d\d\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "test")
grepl("[\d]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "test")
grepl("[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "test")
grepl("^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "test")
grepl("^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "1920-01-12")
grepl("^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "1920-13-12")
grepl("^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "120-13-12")
grepl("^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "1920-13-12")
grepl("^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$", "1920-11-42")
testthat::test_dir("tests/testthat")
getwd()
setwd("D:\Travail\Postulation\JC\SwissTPH\Orain_exercices")
setwd("D:/Travail/Postulation/JC/SwissTPH/Orain_exercices")
testthat::test_dir("tests/testthat")
